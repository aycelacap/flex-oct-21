/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("//grab the dom elements we need (groceries, grocery-form, recipe-list, recipes)\n// command + opt + i\n// console\n// inspect the elements\n\n// ------- groceries -------\n// let groceries = document.getElementsByClassName(\"groceries\");\n// or\n// we want the DOM elements or nodes and not a collection saved in an array so \n// so we use querySelector\nconst groceries = document.querySelector('.groceries');\n\n\n// ---------- grocery-form ----------\nconst groceryForm = document.querySelector('.grocery-form');\n\n// ---------- recipe-list ----------\nconst recipeList = document.querySelector('.recipe-list');\n\n// ---------- recipes ----------\nconst recipes = document.querySelector('.recipes');\n\n\n//create variables to hold localStorage things\n// The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions only\n\n// const json = '{\"result\":true, \"count\":42}';\n// const obj = JSON.parse(json);\n\n// console.log(obj.count);\n// // expected output: 42\n\n// console.log(obj.result);\n// // expected output: true\n// because everything is in objects, we need to parse them so we can key into the objects\n\nconst lsItems = JSON.parse(localStorage.getItem('items')) || [];\nconst lsRecipes = JSON.parse(localStorage.getItem('recipes')) || [];\n\n//---------------PHASE 1 DOM MANIPULATION DEMO-----------------//\n//create event handler that adds to our grocery list\nconst addItem = (e) => {\n  e.preventDefault();\n  // Prevents the browsers default behaviour (such as opening a link), but does not stop the event from bubbling up the DOM.\n\n  // grab the input field and extract it's value\n  // .querySelector returns the first Element within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned.\n\n  // look at line 20\n  let input = document.querySelector(\"input[name='add-grocery']\");\n  // we are accessing the html attribute for input\n  let value = input.value;\n\n  // creating a new constant to save the value as a key/val pair\n\n  const item = { value: value } // {value: value} => { value: 'eggs' }\n\n  // add this new item to our localStorage items\n  // The setItem(key, val) method of the Storage interface, when passed a key name and value, will add that key to the given Storage object, or update that key's value if it already exists.\n\n  lsItems.push(item);\n  localStorage.setItem(\"items\", JSON.stringify(lsItems));\n\n  // try adding a grocery. it doesnt work. \n  // we need to update our list \n  // create an update list first\n\n  // call our method to update the grocery list \n  updateList();\n\n  // clear input field of gorcery form\n  groceryForm.reset();\n}\n\n//create action to render grocery list items\nconst updateList = () => {\n\n  // method 1: using string html element\n  // groceries.innerHTML = lsItems.map(item => {\n  //       return `<li>${item.value}</li>`\n  //   });\n\n\n  // method 2: using document.createElement\n// Node.hasChildNodes()\n// The hasChildNodes() method of the Node interface returns a boolean value indicating whether the given Node has child nodes or not.\n\n  if (!groceries.hasChildNodes()) {\n    // the children would be what we add in the field saved into local storage\n    // we will create li's for each item \n    lsItems.map(item => {\n      let li = document.createElement('li');\n      // innerText sets the text to what we item's value!\n\n      li.innerText = item.value;\n      // li.addEventListener(\"click\", markAsDone)\n      groceries.appendChild(li);\n      // appendChild is a JS method that appnds this li as the child of this groceries node\n    })\n  } else {\n    // if we do have childNodes on our Parent Node groceries, we want to add the groceries tp the end of the localStorage list\n    let li = document.createElement('li');\n    li.innerText = lsItems[lsItems.length - 1].value;\n    // li.addEventListener(\"click\", markAsDone)\n    groceries.appendChild(li);\n  };\n\n}\n\n//create event handler to cross out list items on click\nconst markAsDone = (e) => {\n  e.preventDefault();\n  // e.stopPropagation(); //to be added later\n\n  // grab the element that was clicked on (the thing that triggered the event)\n  let ele = e.target;\n\n  ele.classList.toggle('done');\n}\n\n//---------------PHASE III FOR WINDOW, LOCATION, HISTORY DEMO-----------------//\n\n//create event handler that adds to our recipes list\nconst addRecipe = (e) => {\n\n    let recipeText = e.target.innerText;\n\n    lsRecipes.push({ recipeText });\n    localStorage.setItem(\"recipes\", JSON.stringify(lsRecipes))\n\n    updateWeeklyRecipe();\n}\n\n//create action to render our recipes list\n// This should show how we can utilize window.location.hash in conjunction with anchor tags < a ></a > to \"anchor\" specific areas of our webpage when a user clicks on a link based on the id value we set in our set of anchor tags\nconst updateWeeklyRecipe = () => {\n\n  recipes.innerHTML = lsRecipes.map((recipe) => {\n    return `\n            <a href=\"\" class=\"recipeText\">\n                ${recipe.recipeText}\n            </a>\n            `\n  });\n\n  //ADD AN EVENT LISTENER to set window.location.hash\n  recipes.addEventListener('click', (e) => {\n    e.preventDefault();\n\n    let text = e.target.innerText;\n    window.location.hash = text.trim() // trim remove empty spaces from either side of the text\n  })\n}\n\n//---------------------------------------------------------------------//\n\n//add event listener to on submit for form to process add item\ngroceryForm.addEventListener(\"submit\", addItem)\n//add event listener to cross out a list item\n// groceries.addEventListener(\"click\", markAsDone);\n//add event listener to to add recipe\nrecipeList.addEventListener(\"click\", addRecipe);\n\n//call our methods to populate DOM\nupdateList();\nupdateWeeklyRecipe();\n\n\n//--------------------PHASE II EVENT BUBBLIING DEMO---------------------------------//\n// comment out markAsDone above\n// the wuestion is, why can't we just select the li's and \n\n// we will select all the li's\nlet groc = document.querySelectorAll(\".groceries li\") // querySelectorAll puts everything in a node list\n\n// even tho we have an event listener on the parent and child\n// what's the deal with this?\n// This should show that adding event handlers on each li clutters up the code\n// Event delegation takes advantage of bubbling and accomplishes the same thing when the event handler is installed on the parent ul\n// This should also show the bubbling behavior that when a li is clicked, it also triggers event handlers on the parent with sometimes unexpected outcomes. Like, we expected the groceries to be crossed off but that doesn't happen\n\n// console.log(groc)\ngroc.forEach((child) => {\n    child.addEventListener(\"click\", markAsDone);\n})\nconst boo = (e) => {\n    alert(\"Boo from the groceries ul! You didn't expect this, did you?!\")\n}\n\ngroceries.addEventListener(\"click\", boo); //parent\n\n\n//---------------------------------------------------------------------//\n\n\n//Script for LinkedIn endorsements\n// let skills = document.getElementsByClassName('pv-skill-entity__featured-endorse-button-shared');\n// for (let i = 0; i < skills.length; ++i) {\n//     skills[i].click();\n// }\n\n//# sourceURL=webpack://vanilla-doom/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;